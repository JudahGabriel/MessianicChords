@page "/artist/{artistName}"
@inject MessianicChords.Services.ChordSheetService chordsService
@inject IJSRuntime jsRuntime

<div class="grouped-results-header mt-5 mb-5">
    <span>@ArtistName</span>
</div>
<div class="d-flex flex-wrap justify-content-center">
    @foreach (var chordSheet in chords.Items)
    {
        <ChordCard ChordSheet="@chordSheet"></ChordCard>
    }
</div>

<div class="d-grid mt-4 mb-5 col-lg-3 col-md-4 mx-auto">
    <LoadMoreButton List="@chords"></LoadMoreButton>
</div>


@code {
    private PagedList<ChordSheet> chords = new PagedList<ChordSheet>();

    [Parameter]
    public string ArtistName { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        this.ArtistName = Uri.UnescapeDataString(this.ArtistName).Replace("+", " ");

        this.chords = new PagedList<ChordSheet>((skip, take) => this.chordsService.GetByArtistName(this.ArtistName, skip, take), () => this.StateHasChanged());
        this.chords.Take = 50;
        var chunk = await this.chords.GetNextChunk();

        // Make the name reflect the properly cased name.
        var firstResult = chunk.Results.FirstOrDefault();
        if (firstResult != null)
        {
            this.ArtistName = firstResult.Artist;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("updateTitle", $"{this.ArtistName} guitar chords and lyrics");
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}
